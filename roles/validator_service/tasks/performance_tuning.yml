---
- name: Enable CPU performance mode
  when: enable_cpu_performance_mode
  block:
    - name: Install required packages (Debian-based)
      ansible.builtin.package:
        name:
          - cpufrequtils
          - linux-tools-common
        state: present
      when: ansible_os_family == "Debian"

    - name: Check available CPU governors
      ansible.builtin.command: cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
      register: governor_output
      changed_when: false
      check_mode: false
      failed_when: governor_output.rc != 0

    - name: Fail if performance governor is not supported
      ansible.builtin.fail:
        msg: "'performance' CPU governor is not supported on this host."
      when: "'performance' not in governor_output.stdout"

    - name: Set CPU governor to performance immediately
      ansible.builtin.shell: |
        for CPUFREQ in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
          echo performance > "$CPUFREQ"
        done
      args:
        executable: /bin/bash

    - name: Create systemd service to persist performance mode
      ansible.builtin.copy:
        dest: /etc/systemd/system/cpufreq-performance.service
        content: |
          [Unit]
          Description=Set CPU governor to performance
          After=multi-user.target

          [Service]
          Type=oneshot
          ExecStart=/bin/bash -c 'for CPU in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do echo performance > "$CPU"; done'

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: "0644"

    - name: Enable and start cpufreq-performance systemd service
      systemd_service:
        name: cpufreq-performance.service
        daemon_reload: true
        enabled: true
        state: started

- name: Disable swap
  become: true
  block:
    - name: Disable all active swap immediately
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Remove swap entries from /etc/fstab
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^\s*([^#].*\s+swap\s+.*)$'
        replace: '# \1'
        backup: true
  when: disable_swap

- name: Update kernel settings
  become: true
  template:
    src: 99_fogo_validator.conf.j2
    dest: "/etc/sysctl.d/99-fogo-validator.conf"
    owner: root
    group: root
    mode: "0644"
  notify: Apply sysctl settings

- name: Update nofile limits for shells
  become: true
  blockinfile:
    path: /etc/security/limits.conf
    block: |
      * soft nofile 52428800
      * hard nofile 52428800

- name: Update network ring buffers
  block:
    - name: Filter NICs (exclude loopback and bonds)
      set_fact:
        real_nics: "{{ ansible_interfaces | reject('match', '^(lo|bond).*') | list }}"
    - name: Create systemd service to persist ring buffers settings
      ansible.builtin.copy:
        dest: /etc/systemd/system/nic-rings.service
        content: |
          [Unit]
          Description=Increase NIC ring buffers required by FOGO
          After=network.target

          [Service]
          Type=oneshot
          {% for nic in real_nics %}
          ExecStart=/sbin/ethtool -G {{ nic }} rx 8192 tx 8192
          {% endfor %}
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: "0644"

    - name: Enable and start nic-rings systemd service
      systemd_service:
        name: nic-rings.service
        daemon_reload: true
        enabled: true
        state: started
