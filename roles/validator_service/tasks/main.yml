#SPDX-License-Identifier: MIT ---
# tasks file for fogo_validator
- name: Install the acl package that is needed by Ansible
  become: true
  apt:
    name:
      - acl
    update_cache: yes
  when: not upgrade_only

- name: Bootstrap disks (which should be run only once)
  include_tasks: bootstrap_disks.yml
  when: bootstrap_disks and not upgrade_only

- name: Conditionally include CPU performance tasks
  include_tasks: cpu_performance_mode.yml
  when: enable_cpu_performance_mode and not upgrade_only

- name: Update UFW settings for Firedancer
  include_tasks: ufw_settings.yml
  when: not upgrade_only

- name: Create a service user
  become: true
  user:
    name: "{{ service_user }}"
    shell: "/bin/bash"
    create_home: true
    password: "!"
    state: present
  when: not upgrade_only

- name: Update repositories cache and install required libraries
  become: true
  apt:
    name:
      - build-essential
      - clang
      - git
      - make
      - pkgconf
      - cmake
      - libssl-dev
      - libclang-dev
      - libudev-dev
      - protobuf-compiler
    update_cache: yes
  when: not upgrade_only

- name: Build fogo firedancer client
  include_tasks: build_fogo_fd_client.yml
  vars:
    temp_source_code_folder: "/home/{{ service_user }}/fogo-{{ validator_client_version }}"

- name: Generate firedancer config from the template
  template:
    src: firedancer_config_template.toml.j2
    dest: "{{ firedancer_config_path }}"
    mode: "0644"
    owner: "{{ service_user }}"
    group: "{{ service_user }}"
  when: not upgrade_only

- name: Check the existence of the key files
  block:
    - name: Check if the identity keypair exists
      stat:
        path: "{{ identity_path }}"
      register: identity_keypair_stat

    - name: "{{ identity_path }} does not exist, create a new one for now"
      become: true
      become_user: "{{ service_user }}"
      shell: "fdctl keys new identity --config {{ firedancer_config_path }}"
      when: not identity_keypair_stat.stat.exists
  when: not upgrade_only

- name: Create the systemd service for fogo
  become: true
  template:
    src: firedancer_systemd.j2
    dest: "/etc/systemd/system/fogo-validator.service"
    mode: "0644"
  when: not upgrade_only

- name: Enable and start fogo validator
  systemd_service:
    name: fogo-validator
    daemon_reload: true
    enabled: true
    state: started
  when: not upgrade_only
